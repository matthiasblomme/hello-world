---
openapi: 3.0.3
info:
  title: DCSA OpenAPI specification for Booking - Beta 1
  description: |
    API specification issued by DCSA.org.

    For explanation to specific values or objects please refer to the <a href='https://dcsa.my.salesforce.com/sfc/p/#2o000000YvHJ/a/7T000000bnvo/id.kB9TVoeYABFV8NwRBQvgVkWXXK7DAuIelpCDw13M'>Information Model v2022.1</a>. This API does not define the business rules regarding what is allowed to update at what time. For this the [BKG IFS](https://dcsa.my.salesforce.com/sfc/p/#2o000000YvHJ/a/7T000000bo76/oQysHk_PY6pMeBk9agiuT4hZEMzJXNnDLaF.Fulrt1I) should be consulted.

    All other documents related to the Booking publication can be found [here](https://knowledge.dcsa.org/s/publication?publicationId=a0r7T000000L8mmQAC)

    It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint
    - /v1/events

    in order to poll event information.

    It is recomended to implement the [DCSA Documentation Event Hub](https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB) in order to use the push model. Here events are pushed as they occur.

    For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/bkg/v1#v100). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: https://dcsa.org
    email: info@dcsa.org
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0-Beta-1
servers:
- url: /
tags:
- name: Booking Request
  description: |
    The initial steps by the Shipper to create a Booking
- name: Shipment
  description: |
    The shipment as agreed by both parties
- name: Cancellation
  description: |
    Shipper initiated cancellation of a booking
- name: Booking Events
  description: |
    If no subscriptions have been setup, event polling can be done here
paths:
  /v1/booking-summaries:
    get:
      tags:
      - Booking Request
      summary: Get booking requests
      description: |
        Retrieves the booking request _metadata_
      parameters:
      - name: documentStatus
        in: query
        description: |
          Filter by the status of the booking. Possible values are:
          - RECE (Received)
          - PENU (Pending Update)
          - PENC (Pending Confirmation)
          - CONF (Confirmed)
          - REJE (Rejected)
          - CANC (Cancelled)
          - CMPL (Completed)

          More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv">GitHub</a>. Be aware that the list linked to is the `ShipmentEventTypeCodes` which is equivalent to `documentStatus`, the list is a subset of the possible values.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/bookingDocumentStatus'
      - name: limit
        in: query
        description: Maximum number of items to return.
        required: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 100
        example: 100
      - name: cursor
        in: query
        description: A server generated value to specify a specific point in a collection result, used for pagination.
        required: false
        schema:
          type: string
        example: fE9mZnNldHw9MTAmbGltaXQ9MTA=
      - name: sort
        in: query
        description: |
          A comma-separated list of field names to define the sort order. Field names should be suffixed by a (:) followed by either the keyword ASC (for ascending order) or DESC (for descening order) to specify direction. <b>:ASC</b> may be omitted, in which case ascending order will be used.
        required: false
        schema:
          type: string
        example: carrierBookingReference:DESC
      - name: API-Version
        in: header
        description: |
          An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.
        required: false
        schema:
          type: string
          example: "1"
      responses:
        "200":
          description: Request successful
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Next-Page:
              $ref: '#/components/headers/Next-Page'
            Prev-Page:
              $ref: '#/components/headers/Prev-Page'
            Last-Page:
              $ref: '#/components/headers/Last-Page'
            First-Page:
              $ref: '#/components/headers/First-Page'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/bookingSummary'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/bookings:
    post:
      tags:
      - Booking Request
      summary: Post a booking request
      description: |
        Creates a new booking request
      parameters:
      - name: API-Version
        in: header
        description: |
          An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.
        required: false
        schema:
          type: string
          example: "1"
      requestBody:
        description: Parameters used to create a booking request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1_bookings_body'
        required: true
      responses:
        "201":
          description: |
            Booking request has been successfully created. Asynchronous processing will now begin. A `ShipmentEvent` will be created with the result of the processing once it is finished.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bookingRefStatus'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/bookings/{carrierBookingRequestReference}:
    get:
      tags:
      - Booking Request
      summary: Get booking requests
      description: |
        Retrieves the booking request with the `carrierBookingRequestReference` in the path.
      parameters:
      - name: carrierBookingRequestReference
        in: path
        description: |
          The `carrierBookingRequestReference` of the booking request to match
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/carrierBookingRequestReference'
      - name: API-Version
        in: header
        description: |
          An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.
        required: false
        schema:
          type: string
          example: "1"
      responses:
        "200":
          description: Request successful
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bookingResponse'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags:
      - Booking Request
      summary: Put booking requests
      description: |
        Updates the booking request with the `carrierBookingRequestReference` in the path.
      parameters:
      - name: carrierBookingRequestReference
        in: path
        description: |
          The `carrierBookingRequestReference` of the booking request to match
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/carrierBookingRequestReference'
      - name: API-Version
        in: header
        description: |
          An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.
        required: false
        schema:
          type: string
          example: "1"
      requestBody:
        description: Parameters used to update the booking request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/booking'
        required: true
      responses:
        "200":
          description: |
            Booking request update has been successfully received. Asynchronous processing will now begin. A `ShipmentEvent` will be created with the result of the processing once it is finished.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bookingRefStatus'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    patch:
      tags:
      - Cancellation
      summary: Cancel a booking
      description: |
        A shipper initiated cancellation of the Booking.
      parameters:
      - name: carrierBookingRequestReference
        in: path
        description: |
          The `carrierBookingRequestReference` of the booking request to match
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/carrierBookingRequestReference'
      - name: API-Version
        in: header
        description: |
          An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.
        required: false
        schema:
          type: string
          example: "1"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bookings_carrierBookingRequestReference_body'
      responses:
        "200":
          description: |
            Booking has been cancellated
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/shipment-summaries:
    get:
      tags:
      - Shipment
      summary: Get shipments
      description: |
        Retrieves the shipment _metadata_.
      parameters:
      - name: documentStatus
        in: query
        description: |
          Filter by the status of the booking. Possible values are:
          - RECE (Received)
          - PENU (Pending Update)
          - PENC (Pending Confirmation)
          - CONF (Confirmed)
          - REJE (Rejected)
          - CANC (Cancelled)
          - CMPL (Completed)

          More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv">GitHub</a>. Be aware that the list linked to is the `ShipmentEventTypeCodes` which is equivalent to `documentStatus`, the list is a subset of the possible values.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/bookingDocumentStatus'
      - name: limit
        in: query
        description: Maximum number of items to return.
        required: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 100
        example: 100
      - name: cursor
        in: query
        description: A server generated value to specify a specific point in a collection result, used for pagination.
        required: false
        schema:
          type: string
        example: fE9mZnNldHw9MTAmbGltaXQ9MTA=
      - name: sort
        in: query
        description: |
          A comma-separated list of field names to define the sort order. Field names should be suffixed by a (:) followed by either the keyword ASC (for ascending order) or DESC (for descening order) to specify direction. <b>:ASC</b> may be omitted, in which case ascending order will be used.
        required: false
        schema:
          type: string
        example: carrierBookingReference:DESC
      - name: API-Version
        in: header
        description: |
          An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.
        required: false
        schema:
          type: string
          example: "1"
      responses:
        "200":
          description: Request successful
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Next-Page:
              $ref: '#/components/headers/Next-Page'
            Prev-Page:
              $ref: '#/components/headers/Prev-Page'
            Last-Page:
              $ref: '#/components/headers/Last-Page'
            First-Page:
              $ref: '#/components/headers/First-Page'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/shipmentSummary'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/shipments/{carrierBookingReference}:
    get:
      tags:
      - Shipment
      summary: Get shipment
      description: |
        Retrieves the shipment with the `carrierBookingReference` in the path.
      parameters:
      - name: carrierBookingReference
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/carrierBookingReference'
      - name: API-Version
        in: header
        description: |
          An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.
        required: false
        schema:
          type: string
          example: "1"
      responses:
        "200":
          description: Request successful
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/shipment'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/events/:
    get:
      tags:
      - Booking Events
      summary: Get Shipment events
      description: |
        Retrieves **booking related** Shipment events. The default sort order is by `eventCreatedDateTime` in descending order (`DESC`)
      parameters:
      - name: shipmentEventTypeCode
        in: query
        description: |
          The status of the document in the booking process to filter by. Possible values are
          - RECE (Received)
          - PENU (Pending Update)
          - PENC (Pending Confirmation)
          - CONF (Confirmed)
          - REJE (Rejected)
          - CANC (Cancelled)
          - CMPL (Completed)

          It is possible to select multiple values by comma `,` separating them. For multiple values the OR-operator is used. For example _shipmentEventTypeCode=RECE,CONF_  Matches **both** Received (`RECE`) and Confirmed (`CONF`) `ShipmentEvents`.

          More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv">GitHub</a>. Be aware that the list provided here is a subset of the possible values.
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/bookingShipmentEventTypeCode'
          default:
          - RECE
          - PENU
          - PENC
          - CONF
          - REJE
          - CANC
          - CMPL
        example:
        - RECE
        - CONF
      - name: documentTypeCode
        in: query
        description: "The `documentTypeCode` to filter by. Possible values are\n- CBR (Carrier Booking Request Reference)\n- BKG (Booking)\n\nIt is possible to select multiple values by comma `,` separating them. For multiple values the OR-operator is used. For example _documentTypeCode=CBR,BKG_ Matches **both** `ShipmentEvents` related to Booking Requests (`CBR`) and Confirmed Bookings (`BKG`).\n\nMore details can be found on <a href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/documenttypecodes.csv\">GitHub</a>. Be aware that the list provided here is a subset of the possible values.        \n"
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/bookingDocumentTypeCode'
          default:
          - CBR
          - BKG
        example: CBR
      - name: carrierBookingReference
        in: query
        description: |
          A set of unique characters provided by carrier to identify a booking.

          Specifying this filter will only return events related to this particular carrierBookingReference.
        schema:
          $ref: '#/components/schemas/carrierBookingReference'
      - name: carrierBookingRequestReference
        in: query
        description: |
          A set of unique characters provided by carrier to identify a booking during the booking request phase.

          Specifying this filter will only return events related to this particular carrierBookingRequestReference.
        schema:
          $ref: '#/components/schemas/carrierBookingRequestReference'
      - name: eventCreatedDateTime
        in: query
        description: |
          Limit the result based on the creating date of the event. It is possible to use operators on this query parameter. This is done by adding a colon followed by an operator at the end of the queryParameterName (before the =)

          <i>eventCreatedDateTime<b>&#58;gte</b>=2021-04-01T14&#58;12&#58;56+01&#58;00</i>

          would result in all events created &#8805; 2021-04-01T14&#58;12&#58;56+01&#58;00

          The following operators are supported
          - &#58;gte (&#8805; Greater than or equal)
          - &#58;gt (&#62; Greater than)
          - &#58;lte (&#8804; Less than or equal)
          - &#58;lt (&#60; Less than)
          - &#58;eq (&#61; Equal to)

          If no operator is provided, a <b>strictly equal</b> is used (this is equivalent to <b>&#58;eq</b> operator).
        required: false
        schema:
          $ref: '#/components/schemas/eventCreatedDateTime'
        example: 2021-04-01T14:12:56+01:00
      - name: limit
        in: query
        description: Maximum number of items to return.
        required: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 100
        example: 100
      - name: cursor
        in: query
        description: A server generated value to specify a specific point in a collection result, used for pagination.
        required: false
        schema:
          type: string
        example: fE9mZnNldHw9MTAmbGltaXQ9MTA=
      - name: sort
        in: query
        description: |
          A comma-separated list of field names to define the sort order. Field names should be suffixed by a (:) followed by either the keyword ASC (for ascending order) or DESC (for descening order) to specify direction. <b>:ASC</b> may be omitted, in which case ascending order will be used.
        required: false
        schema:
          type: string
        example: carrierBookingReference:DESC
      - name: API-Version
        in: header
        description: |
          An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.
        required: false
        schema:
          type: string
          example: "1"
      responses:
        "200":
          description: Request successful
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
            Current-Page:
              $ref: '#/components/headers/Current-Page'
            Next-Page:
              $ref: '#/components/headers/Next-Page'
            Prev-Page:
              $ref: '#/components/headers/Prev-Page'
            Last-Page:
              $ref: '#/components/headers/Last-Page'
            First-Page:
              $ref: '#/components/headers/First-Page'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/shipmentEvent'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
components:
  schemas:
    bookingDocumentStatus:
      type: string
      description: |
        The status of the booking. Possible values are:
        - RECE (Received)
        - PENU (Pending Update)
        - PENC (Pending Confirmation)
        - CONF (Confirmed)
        - REJE (Rejected)
        - CANC (Cancelled)
        - CMPL (Completed)

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv">GitHub</a>. Be aware that the list linked to is the `ShipmentEventTypeCodes` which is equivalent to `documentStatus`, the list is a subset of the possible values.
      example: RECE
      enum:
      - RECE
      - PENU
      - PENC
      - CONF
      - REJE
      - CANC
      - CMPL
    bookingSummary:
      type: object
      description: |
        Includes the information requested in a booking, service terms and types as well as the assigned booking reference by the carrier.
      allOf:
      - $ref: '#/components/schemas/bookingRefStatus'
      - $ref: '#/components/schemas/bookingShallow'
    bookingRefStatus:
      required:
      - bookingRequestCreatedDateTime
      - bookingRequestUpdatedDateTime
      - carrierBookingRequestReference
      - documentStatus
      type: object
      description: |
        The `carrierBookingRequestReference` along with the `documentStatus` is returned
      allOf:
      - type: object
        properties:
          carrierBookingRequestReference:
            $ref: '#/components/schemas/carrierBookingRequestReference'
      - type: object
        properties:
          documentStatus:
            allOf:
            - $ref: '#/components/schemas/bookingDocumentStatus'
      - type: object
        properties:
          bookingRequestCreatedDateTime:
            $ref: '#/components/schemas/bookingRequestCreatedDateTime'
      - type: object
        properties:
          bookingRequestUpdatedDateTime:
            $ref: '#/components/schemas/bookingRequestUpdatedDateTime'
    carrierBookingRequestReference:
      type: string
      description: |
        A reference to the booking during the booking request phase
      example: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
    bookingRequestCreatedDateTime:
      type: string
      description: |
        The date and time when the booking request was created
      format: date-time
      example: 2021-11-03T09:41:00+08:30
    bookingRequestUpdatedDateTime:
      type: string
      description: |
        Last date and time when the booking request was updated
      format: date-time
      example: 2021-11-03T09:41:00+08:30
    bookingShallow:
      required:
      - cargoMovementTypeAtDestination
      - cargoMovementTypeAtOrigin
      - communicationChannel
      - deliveryTypeAtDestination
      - isEquipmentSubstitutionAllowed
      - isExportDeclarationRequired
      - isImportLicenseRequired
      - isPartialLoadAllowed
      - receiptTypeAtOrigin
      - serviceContractReference
      - submissionDateTime
      type: object
      description: |
        The shallow structure of the booking
      allOf:
      - type: object
        properties:
          receiptTypeAtOrigin:
            $ref: '#/components/schemas/receiptDeliveryTypeAtOrigin'
      - type: object
        properties:
          deliveryTypeAtDestination:
            $ref: '#/components/schemas/receiptDeliveryTypeAtDestination'
      - type: object
        properties:
          cargoMovementTypeAtOrigin:
            $ref: '#/components/schemas/cargoMovementTypeAtOrigin'
      - type: object
        properties:
          cargoMovementTypeAtDestination:
            $ref: '#/components/schemas/cargoMovementTypeAtDestination'
      - type: object
        properties:
          serviceContractReference:
            $ref: '#/components/schemas/serviceContractReference'
      - type: object
        properties:
          paymentTermCode:
            $ref: '#/components/schemas/paymentTermCode'
      - type: object
        properties:
          isPartialLoadAllowed:
            $ref: '#/components/schemas/isPartialLoadAllowed'
      - type: object
        properties:
          isExportDeclarationRequired:
            $ref: '#/components/schemas/isExportDeclarationRequired'
      - type: object
        properties:
          exportDeclarationReference:
            $ref: '#/components/schemas/exportDeclarationReference'
      - type: object
        properties:
          isImportLicenseRequired:
            $ref: '#/components/schemas/isImportLicenseRequired'
      - type: object
        properties:
          importLicenseReference:
            $ref: '#/components/schemas/importLicenseReference'
      - type: object
        properties:
          submissionDateTime:
            $ref: '#/components/schemas/submissionDateTime'
      - type: object
        properties:
          isAMSACIFilingRequired:
            $ref: '#/components/schemas/isAMSACIFilingRequired'
      - type: object
        properties:
          isDestinationFilingRequired:
            $ref: '#/components/schemas/isDestinationFilingRequired'
      - type: object
        properties:
          contractQuotationReference:
            $ref: '#/components/schemas/contractQuotationReference'
      - type: object
        properties:
          expectedDepartureDate:
            $ref: '#/components/schemas/expectedDepartureDate'
      - type: object
        properties:
          expectedArrivalAtPlaceOfDeliveryStartDate:
            $ref: '#/components/schemas/expectedArrivalAtPlaceOfDeliveryStartDate'
      - type: object
        properties:
          expectedArrivalAtPlaceOfDeliveryEndDate:
            $ref: '#/components/schemas/expectedArrivalAtPlaceOfDeliveryEndDate'
      - type: object
        properties:
          transportDocumentTypeCode:
            $ref: '#/components/schemas/transportDocumentTypeCode'
      - type: object
        properties:
          transportDocumentReference:
            $ref: '#/components/schemas/transportDocumentReference'
      - type: object
        properties:
          bookingChannelReference:
            $ref: '#/components/schemas/bookingChannelReference'
      - type: object
        properties:
          incoTerms:
            $ref: '#/components/schemas/incoTerms'
      - type: object
        properties:
          communicationChannelCode:
            $ref: '#/components/schemas/communicationChannelCode'
      - type: object
        properties:
          isEquipmentSubstitutionAllowed:
            $ref: '#/components/schemas/isEquipmentSubstitutionAllowed'
      - type: object
        properties:
          vesselName:
            $ref: '#/components/schemas/vesselName'
      - type: object
        properties:
          vesselIMONumber:
            $ref: '#/components/schemas/vesselIMONumber'
      - type: object
        properties:
          exportVoyageNumber:
            $ref: '#/components/schemas/exportVoyageNumber'
      - type: object
        properties:
          preCarriageModeOfTransportCode:
            allOf:
            - $ref: '#/components/schemas/modeOfTransport'
            - description: |
                The mode of transport performed by the shipper for preCarriage as defined by DCSA.
    receiptDeliveryTypeAtOrigin:
      maxLength: 3
      type: string
      description: |
        Indicates the type of service offered at Origin. Options are defined in the Receipt/Delivery entity.
      example: CY
      enum:
      - CY
      - SD
      - CFS
    receiptDeliveryTypeAtDestination:
      maxLength: 3
      type: string
      description: |
        Indicates the type of service offered at Destination. Options are defined in the Receipt/Delivery entity.
      example: CY
      enum:
      - CY
      - SD
      - CFS
    cargoMovementTypeAtOrigin:
      maxLength: 3
      type: string
      description: |
        Refers to the shipment term at the loading of the cargo into the container. Options are defined in the Cargo Movement Type entity.
      example: FCL
      enum:
      - FCL
      - LCL
      - BB
    cargoMovementTypeAtDestination:
      maxLength: 3
      type: string
      description: |
        Refers to the shipment term at the unloading of the cargo out of the container. Options are defined in the Cargo Movement Type entity.
      example: FCL
      enum:
      - FCL
      - LCL
      - BB
    serviceContractReference:
      maxLength: 30
      type: string
      description: Reference number for agreement between shipper and carrier through which the shipper commits to provide a certain minimum quantity of cargo over a fixed period, and the carrier commits to a certain rate or rate schedule.
    paymentTermCode:
      type: string
      description: |
        Indicates whether freight & charges are due for payment before the shipment is effected, practically before the transport document is released to shipper (Prepaid) or before the shipment is finalized meaning cargo released to consignee (Collect)
        - PRE (Prepaid)
        - COL (Collect)
      example: PRE
      enum:
      - PRE
      - COL
    isPartialLoadAllowed:
      type: boolean
      description: |
        Indication whether the shipper agrees to load part of the shipment in case where not all of the cargo is delivered within cut-off.
      example: true
    isExportDeclarationRequired:
      type: boolean
      description: |
        Information provided by the shipper whether an export declaration is required for this particular shipment/commodity/destination.
      example: true
    exportDeclarationReference:
      maxLength: 35
      type: string
      description: |
        A government document permitting designated goods to be shipped out of the country.  Reference number assigned by an issuing authority to an Export License. The export license must be valid at time of departure. Required if Export declaration required is ‘True’.
      example: ABC123123
    isImportLicenseRequired:
      type: boolean
      description: |
        Information provided by the shipper whether an import permit or license is required for this particular shipment/commodity/destination.
      example: true
    importLicenseReference:
      maxLength: 35
      type: string
      description: |
        A certificate, issued by countries exercising import controls, that permits importation of the articles stated in the license. Reference number assigned by an issuing authority to an Import License. The import license number must be valid at time of arrival. Required if import license required is ‘True’.
      example: ABC123123
    submissionDateTime:
      type: string
      description: |
        Date and time of submitting the relevant document and attributes
      format: date-time
      example: 2019-11-12T07:41:00+08:30
    isAMSACIFilingRequired:
      type: boolean
      description: |
        Customs filing for US (AMS) or Canadian (ACI) customs
      example: true
    isDestinationFilingRequired:
      type: boolean
      description: |
        Indicates whether the shipper will perform the AMS/ACI filing directly or not. Mandatory if AMS/ACI filing is required
      example: true
    contractQuotationReference:
      maxLength: 35
      type: string
      description: |
        Information provided by the shipper to identify whether pricing for the shipment has been agreed via a contract or a quotation reference. Mandatory if service contract (owner) is not provided.
      example: DKK
    expectedDepartureDate:
      type: string
      description: |
        The date when the shipment is expected to be loaded on board a vessel as provided by the shipper or its agent. If vessel/voyage or expected date of arrival is not provided, this is mandatory
      format: date
      example: 2021-05-17
    expectedArrivalAtPlaceOfDeliveryStartDate:
      type: string
      description: |
        The start date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryEndDate`) for when the shipment is expected to arrive at final destination. If vessel/voyage or `expectedDepartureDate` is not provided, this is mandatory together with `expectedArrivalAtPlaceOfDeliveryEndDate`
      format: date
      example: 2021-05-17
    expectedArrivalAtPlaceOfDeliveryEndDate:
      type: string
      description: |
        The end date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryStartDate`) for when the shipment is expected to arrive at final destination. If vessel/voyage or `expectedDepartureDate` is not provided, this is mandatory together with `expectedArrivalAtPlaceOfDeliveryStartDate`
      format: date
      example: 2021-05-19
    transportDocumentTypeCode:
      type: string
      description: |
        Specifies the type of the transport document
        - BOL (Bill of Lading)
        - SWB (Sea Waybill)
      example: SWB
      enum:
      - BOL
      - SWB
    transportDocumentReference:
      maxLength: 20
      type: string
      description: |
        A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.
    bookingChannelReference:
      maxLength: 20
      type: string
      description: |
        Identification number provided by the platform/channel used for booking request/confirmation, ex: Inttra booking reference, or GTNexus, other. Conditional on booking channel being used
      example: ABC12313
    incoTerms:
      type: string
      description: |
        Transport obligations, costs and risks as agreed between buyer and seller.
        - FCA (Free Carrier)
        - FOB (Free on Board)
      example: FCA
      enum:
      - FCA
      - FOB
    communicationChannelCode:
      maxLength: 2
      type: string
      description: |
        Specifying which communication channel is to be used for this booking e.g.
        - EI (EDI transmission)
        - EM (Email)
        - AO (API)
      example: AO
      enum:
      - EI
      - EM
      - AO
    isEquipmentSubstitutionAllowed:
      type: boolean
      description: |
        Indicates if an alternate equipment type can be provided by the carrier.
      example: true
    vesselName:
      maxLength: 35
      type: string
      description: |
        The name of the Vessel given by the Vessel Operator and registered with IMO.
      example: King of the Seas
    vesselIMONumber:
      maxLength: 7
      type: string
      description: |
        The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel
      example: "9321483"
    exportVoyageNumber:
      maxLength: 50
      type: string
      description: The vessel operator-specific identifier of the export Voyage.
      example: 2103S
    modeOfTransport:
      type: string
      description: |
        The mode of transport as defined by DCSA.
      enum:
      - VESSEL
      - RAIL
      - TRUCK
      - BARGE
    error:
      required:
      - errorDateTime
      - errors
      - httpMethod
      - requestUri
      - statusCode
      - statusCodeText
      type: object
      properties:
        httpMethod:
          type: string
          description: |
            The http request method type e.g. GET, POST
          example: POST
          enum:
          - GET
          - HEAD
          - POST
          - PUT
          - DELETE
          - OPTION
          - PATCH
        requestUri:
          type: string
          description: |
            The request URI as it was sent
          format: uri
          example: https://dcsa.org/dcsa/tnt/v1/events
        statusCode:
          type: integer
          description: |
            The HTTP status code
          format: int32
          example: 400
        statusCodeText:
          maxLength: 50
          type: string
          description: |
            The textual representation of the status code
          example: Bad Request
        errorMessage:
          maxLength: 200
          type: string
          description: |
            Other error information
          example: The supplied data could not be accepted
        providerCorrelationID:
          maxLength: 100
          type: string
          description: |
            A unique identifier for the transaction, e.g. a UUID
          example: 4426d965-0dd8-4005-8c63-dc68b01c4962
        errorDateTime:
          type: string
          description: |
            The date and time (in ISO 8601 format) the error occurred.
          format: date-time
          example: 2019-11-12T07:41:00+08:30
        errors:
          minItems: 1
          type: array
          description: |
            List of detailed errors, e.g. fields that could not pass validation
          items:
            allOf:
            - $ref: '#/components/schemas/detailedError'
    detailedError:
      required:
      - message
      - reason
      type: object
      properties:
        errorCode:
          maximum: 7999
          minimum: 7000
          type: integer
          description: |
            Standard error code see http://dcsa.org/error-codes (to be created). Examples: 7003 – out or range value, 7004 -  invalid type
          format: int32
          example: 7003
        field:
          maxLength: 50
          type: string
          description: |
            The field that caused the error, e.g. a failed validation
          example: facilityCode
        value:
          maxLength: 500
          type: string
          description: |
            The value that of the field that caused the error
          example: SG SIN WHS
        reason:
          maxLength: 100
          type: string
          description: |
            High level error message
          example: invalidQuery
        message:
          maxLength: 200
          type: string
          description: |
            Additional information as to why the error occured
          example: Spaces not allowed in facility code
    bookingRequest:
      type: object
      description: |
        includes the information requested in a booking, service terms and types as well as the assigned booking reference by the carrier.
      allOf:
      - $ref: '#/components/schemas/bookingShallow'
      - $ref: '#/components/schemas/bookingDeep'
    bookingDeep:
      required:
      - commodities
      type: object
      description: |
        The deep structure of the booking
      allOf:
      - type: object
        properties:
          invoicePayableAt:
            anyOf:
            - $ref: '#/components/schemas/addressLocation'
            - $ref: '#/components/schemas/unLocationLocation'
            - $ref: '#/components/schemas/facilityLocation'
      - type: object
        properties:
          invoicePayableAt:
            description: |
              General purpose object to capture location-related data, the location can be specified in **any** of the following ways: `UN Location Code`, a `Facility` or an `Address`.
            example:
              locationName: Eiffel Tower
              UNLocationCode: FRPAR
      - type: object
        properties:
          placeOfIssue:
            allOf:
            - $ref: '#/components/schemas/location'
            - example:
                locationName: Eiffel Tower
                latitude: "48.8585500"
                longitude: "2.294492036"
                UNLocationCode: FRPAR
            - description: |
                The location where the original transport document (bill of lading) will be issued.
      - $ref: '#/components/schemas/commodities'
      - $ref: '#/components/schemas/valueAddedServiceRequests'
      - $ref: '#/components/schemas/references'
      - $ref: '#/components/schemas/requestedEquipments'
      - $ref: '#/components/schemas/documentParties'
      - $ref: '#/components/schemas/shipmentLocations'
    addressLocation:
      required:
      - address
      type: object
      description: |
        An interfrace used to express a location using an `Address` object
      allOf:
      - type: object
        properties:
          locationName:
            $ref: '#/components/schemas/locationName'
      - type: object
        properties:
          address:
            description: Address related information
            allOf:
            - $ref: '#/components/schemas/address'
    locationName:
      maxLength: 100
      type: string
      description: The name of the location.
      example: Eiffel Tower
    address:
      type: object
      description: |
        An object for storing address related information
      allOf:
      - type: object
        properties:
          name:
            $ref: '#/components/schemas/addressName'
      - type: object
        properties:
          street:
            $ref: '#/components/schemas/streetName'
      - type: object
        properties:
          streetNumber:
            $ref: '#/components/schemas/streetNumber'
      - type: object
        properties:
          floor:
            $ref: '#/components/schemas/floor'
      - type: object
        properties:
          postCode:
            $ref: '#/components/schemas/postCode'
      - type: object
        properties:
          city:
            $ref: '#/components/schemas/cityName'
      - type: object
        properties:
          stateRegion:
            $ref: '#/components/schemas/stateRegion'
      - type: object
        properties:
          country:
            $ref: '#/components/schemas/country'
    addressName:
      maxLength: 100
      type: string
      description: Name of the address
      example: Henrik
    streetName:
      maxLength: 100
      type: string
      description: The name of the street of the party’s address.
      example: Kronprincessegade
    streetNumber:
      maxLength: 50
      type: string
      description: The number of the street of the party’s address.
      example: "54"
    floor:
      maxLength: 50
      type: string
      description: The floor of the party’s street number.
      example: 5. sal
    postCode:
      maxLength: 10
      type: string
      description: The post code of the party’s address.
      example: "1306"
    cityName:
      maxLength: 65
      type: string
      description: The city name of the party’s address.
      example: København
    stateRegion:
      maxLength: 65
      type: string
      description: The state/region of the party’s address.
      example: N/A
    country:
      maxLength: 75
      type: string
      description: The country of the party’s address.
      example: Denmark
    unLocationLocation:
      required:
      - UNLocationCode
      type: object
      description: |
        An interfrace used to express a location using a `Un Location Code`
      allOf:
      - type: object
        properties:
          locationName:
            $ref: '#/components/schemas/locationName'
      - type: object
        properties:
          UNLocationCode:
            $ref: '#/components/schemas/UNLocationCode'
    UNLocationCode:
      maxLength: 5
      type: string
      description: The UN Location code specifying where the place is located.
      example: FRPAR
    facilityLocation:
      required:
      - facilityCode
      - facilityCodeListProvider
      type: object
      description: |
        An interfrace used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code
      allOf:
      - type: object
        properties:
          locationName:
            $ref: '#/components/schemas/locationName'
      - type: object
        properties:
          UNLocationCode:
            $ref: '#/components/schemas/UNLocationCode'
      - type: object
        properties:
          facilityCode:
            $ref: '#/components/schemas/facilityCode'
      - type: object
        properties:
          facilityCodeListProvider:
            $ref: '#/components/schemas/facilityCodeListProvider'
    facilityCode:
      maxLength: 6
      type: string
      description: |
        The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.
      nullable: false
      example: ADT
    facilityCodeListProvider:
      type: string
      description: |
        The provider used for identifying the facility Code
      example: SMDG
      enum:
      - BIC
      - SMDG
    location:
      type: object
      description: |
        General purpose object to capture location-related data, the location can be specified in **any** of the following ways: `geoLocation` (lat+long), `UN Location Code`, a `Facility` or an `Address`.

        If multiple ways are used - then they all have to point to the same location!
      allOf:
      - type: object
        properties:
          locationName:
            $ref: '#/components/schemas/locationName'
      - type: object
        properties:
          latitude:
            $ref: '#/components/schemas/latitude'
      - type: object
        properties:
          longitude:
            $ref: '#/components/schemas/longitude'
      - type: object
        properties:
          UNLocationCode:
            $ref: '#/components/schemas/UNLocationCode'
      - type: object
        properties:
          facilityCode:
            $ref: '#/components/schemas/facilityCode'
      - type: object
        properties:
          facilityCodeListProvider:
            $ref: '#/components/schemas/facilityCodeListProvider'
      - type: object
        properties:
          address:
            description: Address related information
            allOf:
            - $ref: '#/components/schemas/address'
    latitude:
      maxLength: 10
      type: string
      description: Geographic coordinate that specifies the north–south position of a point on the Earth&apos;s surface.
      example: "48.8585500"
    longitude:
      maxLength: 11
      type: string
      description: Geographic coordinate that specifies the east–west position of a point on the Earth&apos;s surface.
      example: "2.294492036"
    commodities:
      type: object
      properties:
        commodities:
          type: array
          items:
            $ref: '#/components/schemas/commodity'
    commodity:
      required:
      - cargoGrossWeight
      - cargoGrossWeightUnit
      - commodityType
      type: object
      description: |
        Type of goods in the booking, defined by its commodity type
      allOf:
      - type: object
        properties:
          commodityType:
            $ref: '#/components/schemas/commodityType'
      - type: object
        properties:
          HSCode:
            $ref: '#/components/schemas/HSCode'
      - type: object
        properties:
          cargoGrossWeight:
            $ref: '#/components/schemas/cargoGrossWeight'
      - type: object
        properties:
          cargoGrossWeightUnit:
            $ref: '#/components/schemas/weightUnit'
      - type: object
        properties:
          cargoGrossVolume:
            $ref: '#/components/schemas/cargoGrossVolume'
      - type: object
        properties:
          cargoGrossVolumeUnit:
            $ref: '#/components/schemas/volumeUnit'
      - type: object
        properties:
          numberOfPackages:
            allOf:
            - $ref: '#/components/schemas/numberOfPackages'
            - description: |
                Specifies the total number of packages associated with this commodity
      - type: object
        properties:
          exportLicenseIssueDate:
            $ref: '#/components/schemas/exportLicenseIssueDate'
      - type: object
        properties:
          exportLicenseExpiryDate:
            $ref: '#/components/schemas/exportLicenseExpiryDate'
    commodityType:
      maxLength: 550
      type: string
      description: |
        High-level description of goods to be shipped which allow the carrier to confirm acceptance and commercial terms. To be replaced by "description of goods" upon submission of shipping instruction
      example: Mobile phones
    HSCode:
      maxLength: 10
      type: string
      description: Used by customs to classify the product being shipped.
    cargoGrossWeight:
      type: number
      description: The grand total weight of the cargo and weight per container(s) including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper. Excludes the tare weight of the container(s).
      format: float
      example: 12000
    weightUnit:
      type: string
      description: The unit of measure which can be expressed in imperial or metric terms
      example: KGM
      enum:
      - KGM
      - LBR
    cargoGrossVolume:
      type: number
      description: The grand total volume of the commodity
      format: float
      example: 120
    volumeUnit:
      type: string
      description: The unit of measure which can be expressed in either imperial or metric terms
      example: CBM
      enum:
      - CBM
      - CFT
    numberOfPackages:
      type: integer
      description: Specifies the number of packages associated with this cargo item
      format: int32
      example: 18
    exportLicenseIssueDate:
      type: string
      description: |
        Issue date of the export license applicable to the booking. Mandatory to provide in booking request for specific commodities
      format: date
      example: 2021-05-14
    exportLicenseExpiryDate:
      type: string
      description: |
        Expiry date of the export license applicable to the booking.

        Mandatory to provide in booking request for specific commodities.
      format: date
      example: 2021-05-21
    valueAddedServiceRequests:
      type: object
      properties:
        valueAddedServiceRequests:
          type: array
          items:
            $ref: '#/components/schemas/valueAddedServiceRequest'
    valueAddedServiceRequest:
      required:
      - valueAddedServiceCode
      type: object
      description: |
        Type of goods in the booking, defined by its commodity type
      allOf:
      - type: object
        properties:
          valueAddedServiceCode:
            $ref: '#/components/schemas/valueAddedServiceCode'
    valueAddedServiceCode:
      type: string
      description: |
        Code of the value added service
        - SCON (Smart containers)
        - CINS (Cargo insurance)
        - SIOT (Smart IoT devices)
        - CDECL (Customs declaration)
        - SGUAR (Shipping guarantee)
        - UPPY (Upfront payment)
      enum:
      - SCON
      - CINS
      - SIOT
      - CDECL
      - SGUAR
      - UPPY
    references:
      type: object
      properties:
        references:
          type: array
          items:
            $ref: '#/components/schemas/reference'
    reference:
      required:
      - referenceType
      - referenceValue
      type: object
      description: |
        references provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.
      allOf:
      - type: object
        properties:
          referenceType:
            $ref: '#/components/schemas/referenceType'
      - type: object
        properties:
          referenceValue:
            $ref: '#/components/schemas/referenceValue'
    referenceType:
      type: string
      description: |
        The reference type codes defined by DCSA.
        - FF (Freight Forwarder’s Reference)
        - SI (Shipper’s Reference)
        - PO (Purchase Order Reference)
        - CR (Customer’s Reference)
        - AAO (Consignee’s Reference)
        - ECR (Empty container release reference)
        - CSI (Customer shipment ID)
        - BPR (Booking party reference number)
        - BID (Booking Request ID)

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/referencetypes.csv">GitHub</a>. Be aware that the list is a subset of the possible values.
      example: FF
      enum:
      - FF
      - SI
      - PO
      - CR
      - AAO
      - ECR
      - CSI
      - BPR
      - BID
    referenceValue:
      maxLength: 100
      type: string
      description: The actual value of the reference.
    requestedEquipments:
      type: object
      properties:
        requestedEquipments:
          type: array
          items:
            $ref: '#/components/schemas/requestedEquipment'
    requestedEquipment:
      required:
      - isShipperOwned
      - requestedEquipmentSizeType
      - requestedEquipmentUnits
      type: object
      description: |
        The requested equipments for the booking
      allOf:
      - type: object
        properties:
          requestedEquipmentSizeType:
            $ref: '#/components/schemas/ISOEquipmentCode'
      - type: object
        properties:
          requestedEquipmentUnits:
            $ref: '#/components/schemas/requestedEquipmentUnits'
      - type: object
        properties:
          equipmentReferences:
            type: array
            items:
              allOf:
              - $ref: '#/components/schemas/equipmentReference'
              - description: |
                  A reference to the equipment used by the shipper if known at the time of booking
      - type: object
        properties:
          isShipperOwned:
            $ref: '#/components/schemas/isShipperOwned'
    ISOEquipmentCode:
      maxLength: 4
      type: string
      description: Unique code for the different equipment size/type used for transporting commodities. The code is a concatenation of ISO Equipment Size Code and ISO Equipment Type Code A and follows the ISO 6346 standard.
      example: 22GP
    requestedEquipmentUnits:
      type: integer
      description: |
        Number of requested equipment units
      format: int32
      example: 3
    equipmentReference:
      maxLength: 15
      type: string
      description: |
        The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
        According to ISO 6346, a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit). If a container does not comply with ISO 6346, it is suggested to follow Recommendation #2 “Container with non-ISO identification” from SMDG.
      example: APZU4812090
    isShipperOwned:
      type: boolean
      description: Indicates whether the container is shipper owned (SOC).
      example: true
    documentParties:
      type: object
      properties:
        documentParties:
          type: array
          items:
            $ref: '#/components/schemas/documentParty'
    documentParty:
      required:
      - isToBeNotified
      - party
      - partyFunction
      type: object
      description: stores the parties involved in the transport document.
      allOf:
      - type: object
        properties:
          party:
            allOf:
            - $ref: '#/components/schemas/party'
      - type: object
        properties:
          partyFunction:
            $ref: '#/components/schemas/partyFunction'
      - type: object
        properties:
          displayedAddress:
            type: array
            items:
              $ref: '#/components/schemas/addressLine'
      - type: object
        properties:
          isToBeNotified:
            $ref: '#/components/schemas/isToBeNotified'
    party:
      required:
      - partyContactDetails
      type: object
      description: refers to a company or a legal entity.
      allOf:
      - type: object
        properties:
          partyName:
            $ref: '#/components/schemas/partyName'
      - type: object
        properties:
          taxReference1:
            $ref: '#/components/schemas/taxReference1'
      - type: object
        properties:
          taxReference2:
            $ref: '#/components/schemas/taxReference2'
      - type: object
        properties:
          publicKey:
            $ref: '#/components/schemas/publicKey'
      - type: object
        properties:
          address:
            allOf:
            - $ref: '#/components/schemas/address'
      - type: object
        properties:
          partyContactDetails:
            minItems: 1
            type: array
            description: |
              A list of contact details - the list cannot be empty
            items:
              allOf:
              - $ref: '#/components/schemas/partyContactDetail'
      - type: object
        properties:
          identifyingCodes:
            type: array
            items:
              allOf:
              - $ref: '#/components/schemas/identifyingCode'
    partyName:
      maxLength: 100
      type: string
      description: Name of the party.
      example: Asseco Denmark
    taxReference1:
      maxLength: 20
      type: string
      description: The identifying number of the consignee or shipper (Individual or entity) used for tax purposes.
      example: CVR-25645774
    taxReference2:
      maxLength: 20
      type: string
      description: Optional second identifying number of the consignee or shipper (Individual or entity) used for tax purposes.
      example: CVR-25645774
    publicKey:
      maxLength: 500
      type: string
      description: The public key used for a digital signature.
      example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkFzaW
    partyContactDetail:
      required:
      - name
      type: object
      description: |
        Contact information for a Party
      allOf:
      - type: object
        properties:
          name:
            $ref: '#/components/schemas/name'
      - type: object
        properties:
          phone:
            $ref: '#/components/schemas/phone'
      - type: object
        properties:
          email:
            $ref: '#/components/schemas/email'
      - type: object
        properties:
          url:
            $ref: '#/components/schemas/url'
    name:
      maxLength: 100
      type: string
      description: Name of the contact
      example: Henrik
    phone:
      maxLength: 30
      type: string
      description: Phone number for the contact
      example: +45 33364660
    email:
      maxLength: 100
      type: string
      description: E-mail address for the contact
      example: info@dcsa.org
    url:
      maxLength: 100
      type: string
      description: URL for the contact
      example: https://www.dcsa.org
    identifyingCode:
      required:
      - DCSAResponsibleAgencyCode
      - partyCode
      type: object
      allOf:
      - type: object
        properties:
          DCSAResponsibleAgencyCode:
            $ref: '#/components/schemas/DCSAResponsibleAgencyCode'
      - type: object
        properties:
          partyCode:
            $ref: '#/components/schemas/partyCode'
      - type: object
        properties:
          codeListName:
            $ref: '#/components/schemas/codeListName'
    DCSAResponsibleAgencyCode:
      type: string
      description: |
        A DCSA provided code for [UN/CEFACT](https://unece.org/fileadmin/DAM/trade/untdid/d16b/tred/tred3055.htm) code list providers:
        - ISO (International Standards Organization)
        - UNECE (United Nations Economic Commission for Europe)
        - LLOYD (Lloyd's register of shipping)
        - BIC (Bureau International des Containeurs)
        - IMO (International Maritime Organization)
        - SCAC (Standard Carrier Alpha Code)
        - ITIGG (International Transport Implementation Guidelines Group)
        - ITU (International Telecommunication Union)
        - SMDG (Shipplanning Message Development Group)
        - EXIS (Exis Technologies Ltd.)
        - FMC (Federal Maritime Commission)
        - CBSA (Canada Border Services Agency)
        - DCSA (Digital Container Shipping Association)
        - ZZZ (Mutually defined)

        More details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/codelistresponsibleagencycodes.csv).
      example: SMDG
      enum:
      - ISO
      - UNECE
      - LLOYD
      - BIC
      - IMO
      - SCAC
      - ITIGG
      - ITU
      - SMDG
      - EXIS
      - FMC
      - CBSA
      - DCSA
      - ZZZ
    partyCode:
      maxLength: 100
      type: string
      description: |
        Code to identify the party as provided by the agency
      example: MSK
    codeListName:
      maxLength: 100
      type: string
      description: |
        The name of the list, provided by the responsible agency
      example: LCL
    partyFunction:
      type: string
      description: |
        Specifies the role of the party in the context of the given Shipping Instruction.
        - OS (Original shipper)
        - CN (Consignee)
        - COW (Invoice payer on behalf of the consignor (shipper))
        - COX (Invoice payer on behalf of the consignee)
        - MS (Document/message issuer/sender)
        - N1 (First Notify Party)
        - N2 (Second Notify Party)
        - NI (Other Notify Party)
        - DDR (Consignor's freight forwarder)
        - DDS (Consignee's freight forwarder)
        - HE (Carrier booking office (transportation office))
        - SCO (Service contract owner - Defined by DCSA)
        - BA (Booking Agency)
        - EBL (EBL Solution Provider)
      example: DDS
      enum:
      - OS
      - CN
      - COW
      - COX
      - MS
      - N1
      - N2
      - NI
      - DDR
      - DDS
      - HE
      - SCO
      - BA
      - EBL
    addressLine:
      maxLength: 250
      type: string
      description: A single address line.
      example: Kronprincessegade 54
    isToBeNotified:
      type: boolean
      description: Used to decide whether the party will be notified of the arrival of the cargo.
      example: true
    shipmentLocations:
      type: object
      properties:
        shipmentLocations:
          type: array
          items:
            $ref: '#/components/schemas/shipmentLocation'
    shipmentLocation:
      required:
      - location
      - shipmentLocationTypeCode
      type: object
      description: maps the relationship between Shipment and Location, e.g., the place of receipt and the places of delivery for a specific shipment.
      allOf:
      - $ref: '#/components/schemas/shipmentLocationNoLocationType'
      - type: object
        properties:
          shipmentLocationTypeCode:
            $ref: '#/components/schemas/shipmentLocationTypeCode'
      - type: object
        properties:
          eventDateTime:
            $ref: '#/components/schemas/eventLocationDateTime'
    shipmentLocationNoLocationType:
      title: shipmentLocation
      type: object
      description: maps the relationship between Shipment and Location, e.g., the place of receipt and the places of delivery for a specific shipment.
      allOf:
      - type: object
        properties:
          location:
            allOf:
            - $ref: '#/components/schemas/location'
            - example:
                locationName: Eiffel Tower
                latitude: "48.8585500"
                longitude: "2.294492036"
                UNLocationCode: FRPAR
      - type: object
        properties:
          displayedName:
            $ref: '#/components/schemas/displayedName'
    displayedName:
      maxLength: 250
      type: string
      description: The address of the Party to be displayed on the transport document.
    shipmentLocationTypeCode:
      type: string
      description: |
        Links to the Location Type Code defined by DCSA.
        - PRE (Place of Receipt)
        - POL (Port of Loading)
        - POD (Port of Discharge)
        - PDE (Place of Delivery)
        - PCF (Pre-carriage From)
        - PSR (Pre-carriage under shipper’s responsibility)
        - OIR (Onward In-land Routing)
        - DRL (Depot release location)
        - ORI (Origin of goods)
        - IEL (Container intermediate export stop off location)
        - PTP (Prohibited transshipment port)
        - RTP (Requested transshipment port)
        - FCD (Full container drop-off location)
        - ECP (Empty container pick-up date and time)
        - IPA (Invoice payable at)
      example: PRE
      enum:
      - PRE
      - POL
      - POD
      - PDE
      - PCF
      - PSR
      - OIR
      - DRL
      - ORI
      - IEL
      - PTP
      - RTP
      - FCD
      - ECP
      - IPA
    eventLocationDateTime:
      type: string
      description: |
        A date when the event is taking place at the location
      format: date-time
      example: 2021-11-03T10:23:00+01:00
    bookingResponse:
      type: object
      description: |
        includes the information requested in a booking, service terms and types as well as the assigned booking reference by the carrier.
      allOf:
      - $ref: '#/components/schemas/bookingSummary'
      - $ref: '#/components/schemas/bookingDeep'
    booking:
      required:
      - carrierBookingRequestReference
      type: object
      description: |
        includes the information requested in a booking, service terms and types as well as the assigned booking reference by the carrier.
      allOf:
      - type: object
        properties:
          carrierBookingRequestReference:
            $ref: '#/components/schemas/carrierBookingRequestReference'
      - $ref: '#/components/schemas/bookingShallow'
      - $ref: '#/components/schemas/bookingDeep'
    documentStatus:
      type: string
      description: |
        The status of the document in the process. Possible values are:
        - RECE (Received)
        - DRFT (Drafted)
        - PENA (Pending Approval)
        - PENU (Pending Update)
        - PENC (Pending Confirmation)
        - CONF (Confirmed)
        - REJE (Rejected)
        - APPR (Approved)
        - ISSU (Issued)
        - SURR (Surrendered)
        - SUBM (Submitted)
        - VOID (Void)
        - CANC (Cancelled)
        - CMPL (Completed)
      example: DRFT
      enum:
      - RECE
      - DRFT
      - PENA
      - PENU
      - PENC
      - CONF
      - REJE
      - APPR
      - ISSU
      - SURR
      - SUBM
      - VOID
      - CANC
      - CMPL
    reason:
      maxLength: 250
      type: string
      description: Reason field in a Shipment event. This field can be used to explain why a specific event has been sent.
      example: The following attributes are missing...
    shipmentSummary:
      required:
      - carrierBookingReference
      - shipmentCreatedDateTime
      type: object
      description: |
        Shipment 'metadata'
      allOf:
      - type: object
        properties:
          carrierBookingReference:
            $ref: '#/components/schemas/carrierBookingReference'
      - type: object
        properties:
          carrierBookingRequestReference:
            $ref: '#/components/schemas/carrierBookingRequestReference'
      - type: object
        properties:
          documentStatus:
            $ref: '#/components/schemas/bookingDocumentStatus'
      - type: object
        properties:
          shipmentCreatedDateTime:
            $ref: '#/components/schemas/shipmentCreatedDateTime'
      - type: object
        properties:
          shipmentUpdatedDateTime:
            $ref: '#/components/schemas/shipmentUpdatedDateTime'
      - type: object
        properties:
          termsAndConditions:
            $ref: '#/components/schemas/termsAndConditions'
    carrierBookingReference:
      maxLength: 35
      type: string
      description: A set of unique characters provided by carrier to identify a booking.
      example: ABC709951
    shipmentCreatedDateTime:
      type: string
      description: |
        The date and time when the shipment was created.
      format: date-time
      example: 2021-09-03T09:03:00+02:00
    shipmentUpdatedDateTime:
      type: string
      description: |
        Last date and time when the Shipment was updated.
      format: date-time
      example: 2021-09-03T09:03:00+02:00
    termsAndConditions:
      type: string
      description: |
        Carrier general terms and conditions for the booking.
    shipment:
      required:
      - booking
      - transports
      type: object
      description: |
        Shipment
      allOf:
      - $ref: '#/components/schemas/shipmentSummary'
      - type: object
        properties:
          booking:
            allOf:
            - $ref: '#/components/schemas/bookingResponse'
      - $ref: '#/components/schemas/transports'
      - $ref: '#/components/schemas/shipmentCutOffTimes'
      - $ref: '#/components/schemas/shipmentLocations'
      - $ref: '#/components/schemas/confirmedEquipments'
      - $ref: '#/components/schemas/charges'
      - $ref: '#/components/schemas/carrierClauses'
    transports:
      type: object
      properties:
        transports:
          type: array
          items:
            $ref: '#/components/schemas/transport'
    transport:
      required:
      - dischargeLocation
      - loadLocation
      - plannedArrivalDate
      - plannedDepartureDate
      - transportPlanStage
      - transportPlanStageSequenceNumber
      type: object
      description: A list of transports sorted by ShipmentTransport sequenceNumber
      allOf:
      - type: object
        properties:
          transportPlanStage:
            $ref: '#/components/schemas/transportPlanStage'
      - type: object
        properties:
          transportPlanStageSequenceNumber:
            $ref: '#/components/schemas/transportPlanStageSequenceNumber'
      - type: object
        properties:
          loadLocation:
            allOf:
            - $ref: '#/components/schemas/location'
            - example:
                UNLocationCode: NLRTM
      - type: object
        properties:
          dischargeLocation:
            allOf:
            - $ref: '#/components/schemas/location'
            - example:
                UNLocationCode: DEDUS
      - type: object
        properties:
          plannedDepartureDate:
            $ref: '#/components/schemas/plannedDepartureDate'
      - type: object
        properties:
          plannedArrivalDate:
            $ref: '#/components/schemas/plannedArrivalDate'
      - type: object
        properties:
          modeOfTransport:
            $ref: '#/components/schemas/modeOfTransport'
      - type: object
        properties:
          vesselName:
            $ref: '#/components/schemas/vesselName'
      - type: object
        properties:
          vesselIMONumber:
            $ref: '#/components/schemas/vesselIMONumber'
      - type: object
        properties:
          importVoyageNumber:
            $ref: '#/components/schemas/importVoyageNumber'
      - type: object
        properties:
          exportVoyageNumber:
            $ref: '#/components/schemas/exportVoyageNumber'
      - type: object
        properties:
          isUnderShippersResponsibility:
            $ref: '#/components/schemas/isUnderShippersResponsibility'
    transportPlanStage:
      type: string
      description: |
        Code qualifying a specific stage of transport e.g. pre-carriage, main carriage transport or on-carriage transport
        - PRC (Pre-Carriage)
        - MNC (Main Carriage Transport)
        - ONC (On-Carriage Transport)
      example: PRC
      enum:
      - PRC
      - MNC
      - ONC
    transportPlanStageSequenceNumber:
      type: integer
      description: |
        Sequence number of the transport plan stage
      format: int32
      example: 5
    plannedDepartureDate:
      type: string
      description: |
        The planned date of departure.
      format: date
    plannedArrivalDate:
      type: string
      description: |
        The planned date of arrival.
      format: date
    importVoyageNumber:
      maxLength: 50
      type: string
      description: The vessel operator-specific identifier of the import Voyage.
      example: 2103N
    isUnderShippersResponsibility:
      type: boolean
      description: |
        Indicator whether mode of transportation for pre-carriage (e.g. truck, barge, rail) is under shipper's responsibility
      example: false
    shipmentCutOffTimes:
      type: object
      properties:
        shipmentCutOffTimes:
          type: array
          items:
            $ref: '#/components/schemas/shipmentCutOffTime'
    shipmentCutOffTime:
      required:
      - cutOffDateTime
      - cutOffDateTimeCode
      type: object
      description: |
        Cut off times
      allOf:
      - type: object
        properties:
          cutOffDateTimeCode:
            $ref: '#/components/schemas/cutOffDateTimeCode'
      - type: object
        properties:
          cutOffDateTime:
            $ref: '#/components/schemas/cutOffDateTime'
    cutOffDateTimeCode:
      type: string
      description: |
        Code for the cut-off time
        - DCO (Documentation cut-off)
        - VCO (VGM cut-off)
        - FCO (FCL delivery cut-off)
        - LCO (LCL delivery cut-off)
        - ECP (Empty container pick-up date and time)
        - EFC (Earliest full-container delivery date)
        - AFD (AMS Filing Due date)
      enum:
      - DCO
      - VCO
      - FCO
      - LCO
      - ECP
      - EFC
      - AFD
    cutOffDateTime:
      type: string
      description: |
        Actual cut-off time
      format: date-time
      example: 2019-11-12T07:41:00+08:30
    confirmedEquipments:
      type: object
      properties:
        confirmedEquipments:
          type: array
          items:
            $ref: '#/components/schemas/confirmedEquipment'
    confirmedEquipment:
      required:
      - confirmedEquipmentSizeType
      - confirmedEquipmentUnits
      type: object
      description: |
        The confirmed equipments for the booking
      allOf:
      - type: object
        properties:
          confirmedEquipmentSizeType:
            $ref: '#/components/schemas/ISOEquipmentCode'
      - type: object
        properties:
          confirmedEquipmentUnits:
            $ref: '#/components/schemas/confirmedEquipmentUnits'
    confirmedEquipmentUnits:
      type: integer
      description: |
        Number of confirmed equipment units
      format: int32
      example: 3
    charges:
      type: object
      properties:
        charges:
          type: array
          items:
            $ref: '#/components/schemas/charge'
    charge:
      required:
      - calculationBasis
      - chargeType
      - currencyAmount
      - currencyCode
      - paymentTermCode
      - quantity
      - unitPrice
      type: object
      description: |
        addresses the monetary value of freight and other service charges for a transport document.
      allOf:
      - type: object
        properties:
          chargeType:
            $ref: '#/components/schemas/chargeType'
      - type: object
        properties:
          currencyAmount:
            $ref: '#/components/schemas/currencyAmount'
      - type: object
        properties:
          currencyCode:
            $ref: '#/components/schemas/currencyCode'
      - type: object
        properties:
          paymentTermCode:
            $ref: '#/components/schemas/paymentTermCode'
      - type: object
        properties:
          calculationBasis:
            $ref: '#/components/schemas/calculationBasis'
      - type: object
        properties:
          unitPrice:
            $ref: '#/components/schemas/unitPrice'
      - type: object
        properties:
          quantity:
            $ref: '#/components/schemas/quantity'
    chargeType:
      maxLength: 20
      type: string
      description: |
        Free text field describing the charge type to apply
    currencyAmount:
      type: number
      description: The monetary value of all freight and other service charges for a transport document, with a maximum of 2-digit decimals.
      format: float
      example: 1012.12
    currencyCode:
      maxLength: 3
      type: string
      description: The currency for the charge, using a 3-character code (ISO 4217).
      example: DKK
    calculationBasis:
      maxLength: 50
      type: string
      description: The code specifying the measure unit used for the corresponding unit price for this cost, such as per day, per ton, per square metre.
      example: Per day
    unitPrice:
      type: number
      description: The unit price of this charge item in the currency of the charge.
      format: float
      example: 3456.6
    quantity:
      type: number
      description: The amount of unit for this charge item.
      format: float
      example: 34.4
    carrierClauses:
      type: object
      properties:
        carrierClauses:
          type: array
          items:
            $ref: '#/components/schemas/carrierClause'
    carrierClause:
      type: object
      description: |
        comprises clauses, added by the carrier to the Transport Document, which are subject to local rules/guidelines or certain mandatory information required to be shared with the customer. Usually printed below the cargo description.
      allOf:
      - type: object
        properties:
          clauseContent:
            $ref: '#/components/schemas/clauseContent'
    clauseContent:
      type: string
      description: The content of the clause.
    eventCreatedDateTime:
      type: string
      description: |
        The timestamp of when the event was created.

        <b>NB</b>&#58; This field should be considered Metadata
      format: date-time
      example: 2021-01-09T14:12:56+01:00
    bookingShipmentEventTypeCode:
      type: string
      description: |
        The status of the booking in the process. Possible values are
        - RECE (Received)
        - PENU (Pending Update)
        - PENC (Pending Confirmation)
        - CONF (Confirmed)
        - REJE (Rejected)
        - CANC (Cancelled)
        - CMPL (Completed)

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv">GitHub</a>. Be aware that the list provided here is a subset of the possible values.
      example: CONF
      enum:
      - RECE
      - PENU
      - PENC
      - CONF
      - REJE
      - CANC
      - CMPL
    bookingDocumentTypeCode:
      maxLength: 3
      type: string
      description: |
        The code to identify the type of information `documentID` points to. Can be one of the following values
        - CBR (Carrier Booking Request Reference)
        - BKG (Booking)

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/documenttypecodes.csv">GitHub</a>. Be aware that the list provided here is a subset of the possible values.
      example: CBR
      enum:
      - CBR
      - BKG
    shipmentEvent:
      type: object
      allOf:
      - $ref: '#/components/schemas/baseEvent'
      - $ref: '#/components/schemas/baseShipmentEvent'
    baseEvent:
      required:
      - eventCreatedDateTime
      type: object
      allOf:
      - type: object
        properties:
          eventID:
            $ref: '#/components/schemas/eventID'
      - type: object
        properties:
          eventCreatedDateTime:
            $ref: '#/components/schemas/eventCreatedDateTime'
      - $ref: '#/components/schemas/baseEventBody'
    eventID:
      type: string
      description: |
        The unique identifier for the event (the message - not the source).

        <b>NB</b>&#58; This field should be considered Metadata
      format: uuid
      example: 3cecb101-7a1a-43a4-9d62-e88a131651e2
    baseEventBody:
      required:
      - eventClassifierCode
      - eventDateTime
      - eventType
      type: object
      description: |
        The Event entity is described as a generalization of all the specific event categories. An event always takes place in relation to a shipment and can additionally be linked to a transport or an equipment
      allOf:
      - type: object
        properties:
          eventType:
            $ref: '#/components/schemas/eventType'
      - type: object
        properties:
          eventClassifierCode:
            $ref: '#/components/schemas/eventClassifierCode'
      - type: object
        properties:
          eventDateTime:
            $ref: '#/components/schemas/eventDateTime'
    eventType:
      type: string
      description: |
        The Event Type of the object - to be used as a discriminator.

        <b>NB</b>&#58; This field should be considered Metadata
    eventClassifierCode:
      type: string
      description: |
        Code for the event classifier. Values can vary depending on eventType
    eventDateTime:
      type: string
      description: The local date and time, where the event took place or when the event will take place, in ISO 8601 format.
      format: date-time
      example: 2019-11-12T07:41:00+08:30
    baseShipmentEvent:
      required:
      - documentID
      - documentTypeCode
      - shipmentEventTypeCode
      type: object
      description: |
        The shipment event entity is a specialization of the event entity to support specification of data that only applies to a shipment event.
      allOf:
      - type: object
        properties:
          eventType:
            type: string
            example: SHIPMENT
            enum:
            - SHIPMENT
      - type: object
        properties:
          eventDateTime:
            description: |
              Value for eventDateTime must be the same value as eventCreatedDateTime
      - type: object
        properties:
          eventClassifierCode:
            type: string
            description: |
              For `ShipmentEvents` the `eventClassifierCode` must be `ACT`
            example: ACT
            enum:
            - ACT
      - type: object
        properties:
          shipmentEventTypeCode:
            $ref: '#/components/schemas/shipmentEventTypeCode'
      - type: object
        properties:
          documentID:
            $ref: '#/components/schemas/documentID'
      - type: object
        properties:
          documentTypeCode:
            $ref: '#/components/schemas/documentTypeCode'
      - type: object
        properties:
          reason:
            $ref: '#/components/schemas/reason'
      - type: object
        properties:
          documentReferences:
            $ref: '#/components/schemas/documentReferences'
      - $ref: '#/components/schemas/references'
    shipmentEventTypeCode:
      type: string
      description: |
        The status of the document in the process. Possible values are
        - RECE (Received)
        - DRFT (Drafted)
        - PENA (Pending Approval)
        - PENU (Pending Update)
        - PENC (Pending Confirmation)
        - CONF (Confirmed)
        - REJE (Rejected)
        - APPR (Approved)
        - ISSU (Issued)
        - SURR (Surrendered)
        - SUBM (Submitted)
        - VOID (Void)
        - REQS (Requested)
        - CMPL (Completed)
        - HOLD (On Hold)
        - RELS (Released)
        - CANC (Cancelled)

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv">GitHub</a>
      example: DRFT
      enum:
      - RECE
      - DRFT
      - PENA
      - PENU
      - PENC
      - CONF
      - REJE
      - APPR
      - ISSU
      - SURR
      - SUBM
      - VOID
      - REQS
      - CMPL
      - HOLD
      - RELS
      - CANC
    documentID:
      type: string
      description: |
        The id of the object defined by the documentTypeCode.
      example: the-id-of-the-documentTypeCode
    documentTypeCode:
      maxLength: 3
      type: string
      description: |
        The code to identify the type of information documentID points to. Can be one of the following values
        - CBR (Carrier Booking Request Reference)
        - BKG (Booking)
        - SHI (Shipping Instruction)
        - SRM (Shipment Release Message)
        - TRD (Transport Document)
        - ARN (Arrival Notice)
        - VGM (Verified Gross Mass)
        - CAS (Cargo Survey)
        - CUS (Customs Inspection)
        - DGD (Dangerous Goods Declaration)
        - OOG (Out of Gauge)

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/documenttypecodes.csv">GitHub</a>
      example: SHI
      enum:
      - CBR
      - BKG
      - SHI
      - SRM
      - TRD
      - ARN
      - VGM
      - CAS
      - CUS
      - DGD
      - OOG
    documentReferences:
      type: array
      description: |
        An optional list of key-value (`documentReferenceType`-`documentReferenceValue`) pairs representing links to objects relevant to the event. The `documentReferenceType`-field is used to describe where the `documentReferenceValue`-field is pointing to.
      example:
      - documentReferenceType: BKG
        documentReferenceValue: ABC123123123
      - documentReferenceType: TRD
        documentReferenceValue: 85943567-eedb-98d3-f4ed-aed697474ed4
      items:
        $ref: '#/components/schemas/documentReferences_inner'
    v1_bookings_body:
      allOf:
      - $ref: '#/components/schemas/bookingRequest'
    bookings_carrierBookingRequestReference_body:
      required:
      - documentStatus
      type: object
      allOf:
      - type: object
        properties:
          documentStatus:
            $ref: '#/components/schemas/documentStatus'
      - type: object
        properties:
          documentStatus:
            type: string
            description: |
              This changes the documentStatus to contain the value:
              - CANC (Cancelled)
            example: CANC
            enum:
            - CANC
      - type: object
        properties:
          reason:
            $ref: '#/components/schemas/reason'
      - type: object
        properties:
          reason:
            description: |
              An optional field where a reason for cancelling the booking can be given.
            example: Booking cancelled due to internal problems
    inline_response_200:
      allOf:
      - $ref: '#/components/schemas/bookingRefStatus'
      - type: object
        properties:
          documentStatus:
            example: CANC
    documentReferences_inner:
      type: object
      properties:
        documentReferenceType:
          type: string
          description: |
            Describes where the documentReferenceValue is pointing to:
            - CBR (Carrier Booking Request Reference)
            - BKG (Carrier Booking Reference)
            - SHI (Shipping Instruction Reference)
            - TRD (Transport Document Reference)
          example: BKG
          enum:
          - CBR
          - BKG
          - SHI
          - TRD
        documentReferenceValue:
          type: string
          description: The value of the identifier the documentReferenceType is describing
          example: 123e4567-e89b-12d3-a456-426614174000
  parameters:
    carrierBookingRequestReferencePathParam:
      name: carrierBookingRequestReference
      in: path
      description: |
        The `carrierBookingRequestReference` of the booking request to match
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/carrierBookingRequestReference'
    carrierBookingReferencePathParam:
      name: carrierBookingReference
      in: path
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/carrierBookingReference'
    documentID:
      name: documentID
      in: query
      description: |
        A set of unique characters to identify a resource. Specifying this filter will only return events related to this particular `documentID`. The `documentID` can point to a bookingRequest (`CBR`) or to a confirmed booking (`BKG`)
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/documentID'
    documentStatus:
      name: documentStatus
      in: query
      description: |
        Filter by the status of the booking. Possible values are:
        - RECE (Received)
        - PENU (Pending Update)
        - PENC (Pending Confirmation)
        - CONF (Confirmed)
        - REJE (Rejected)
        - CANC (Cancelled)
        - CMPL (Completed)

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv">GitHub</a>. Be aware that the list linked to is the `ShipmentEventTypeCodes` which is equivalent to `documentStatus`, the list is a subset of the possible values.
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/bookingDocumentStatus'
    documentTypeCodes:
      name: documentTypeCode
      in: query
      description: "The `documentTypeCode` to filter by. Possible values are\n- CBR (Carrier Booking Request Reference)\n- BKG (Booking)\n\nIt is possible to select multiple values by comma `,` separating them. For multiple values the OR-operator is used. For example _documentTypeCode=CBR,BKG_ Matches **both** `ShipmentEvents` related to Booking Requests (`CBR`) and Confirmed Bookings (`BKG`).\n\nMore details can be found on <a href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/documenttypecodes.csv\">GitHub</a>. Be aware that the list provided here is a subset of the possible values.        \n"
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/bookingDocumentTypeCode'
        default:
        - CBR
        - BKG
      example: CBR
    carrierBookingRequestReferenceQueryParam:
      name: carrierBookingRequestReference
      in: query
      description: |
        A temporary ID provided by carrier to identify a booking request.

        Specifying this filter will only return booking requests related to this particular `carrierBookingRequestReference`.
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/carrierBookingRequestReference'
    carrierBookingReferenceQueryParam:
      name: carrierBookingReference
      in: query
      description: |
        A set of unique characters provided by carrier to identify a confirmed booking.

        Specifying this filter will only return confirmed bookings related to this particular `carrierBookingReference`.
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/carrierBookingReference'
    shipmentEventTypeCodes:
      name: shipmentEventTypeCode
      in: query
      description: |
        The status of the document in the booking process to filter by. Possible values are
        - RECE (Received)
        - PENU (Pending Update)
        - PENC (Pending Confirmation)
        - CONF (Confirmed)
        - REJE (Rejected)
        - CANC (Cancelled)
        - CMPL (Completed)

        It is possible to select multiple values by comma `,` separating them. For multiple values the OR-operator is used. For example _shipmentEventTypeCode=RECE,CONF_  Matches **both** Received (`RECE`) and Confirmed (`CONF`) `ShipmentEvents`.

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv">GitHub</a>. Be aware that the list provided here is a subset of the possible values.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/bookingShipmentEventTypeCode'
        default:
        - RECE
        - PENU
        - PENC
        - CONF
        - REJE
        - CANC
        - CMPL
      example:
      - RECE
      - CONF
    limit:
      name: limit
      in: query
      description: Maximum number of items to return.
      required: false
      schema:
        minimum: 1
        type: integer
        format: int32
        default: 100
      example: 100
    cursor:
      name: cursor
      in: query
      description: A server generated value to specify a specific point in a collection result, used for pagination.
      required: false
      schema:
        type: string
      example: fE9mZnNldHw9MTAmbGltaXQ9MTA=
    sort:
      name: sort
      in: query
      description: |
        A comma-separated list of field names to define the sort order. Field names should be suffixed by a (:) followed by either the keyword ASC (for ascending order) or DESC (for descening order) to specify direction. <b>:ASC</b> may be omitted, in which case ascending order will be used.
      required: false
      schema:
        type: string
      example: carrierBookingReference:DESC
    Api-Version-Major:
      name: API-Version
      in: header
      description: |
        An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.
      required: false
      schema:
        type: string
        example: "1"
    carrierBookingReference:
      name: carrierBookingReference
      in: query
      description: |
        A set of unique characters provided by carrier to identify a booking.

        Specifying this filter will only return events related to this particular carrierBookingReference.
      schema:
        $ref: '#/components/schemas/carrierBookingReference'
    carrierBookingRequestReference:
      name: carrierBookingRequestReference
      in: query
      description: |
        A set of unique characters provided by carrier to identify a booking during the booking request phase.

        Specifying this filter will only return events related to this particular carrierBookingRequestReference.
      schema:
        $ref: '#/components/schemas/carrierBookingRequestReference'
    eventCreatedDateTime:
      name: eventCreatedDateTime
      in: query
      description: |
        Limit the result based on the creating date of the event. It is possible to use operators on this query parameter. This is done by adding a colon followed by an operator at the end of the queryParameterName (before the =)

        <i>eventCreatedDateTime<b>&#58;gte</b>=2021-04-01T14&#58;12&#58;56+01&#58;00</i>

        would result in all events created &#8805; 2021-04-01T14&#58;12&#58;56+01&#58;00

        The following operators are supported
        - &#58;gte (&#8805; Greater than or equal)
        - &#58;gt (&#62; Greater than)
        - &#58;lte (&#8804; Less than or equal)
        - &#58;lt (&#60; Less than)
        - &#58;eq (&#61; Equal to)

        If no operator is provided, a <b>strictly equal</b> is used (this is equivalent to <b>&#58;eq</b> operator).
      required: false
      schema:
        $ref: '#/components/schemas/eventCreatedDateTime'
      example: 2021-04-01T14:12:56+01:00
  headers:
    API-Version:
      description: SemVer used to indicate the version of the contract (API version) returned.
      schema:
        type: string
        example: 1.0.0
    Current-Page:
      description: A link to the current page.
      required: true
      schema:
        type: string
        example: fE9mZnNldHw9MCZsaW1pdD01
    Next-Page:
      description: A link to the next page. Next-Page header link MAY be omitted if the current page is the last page.
      required: false
      schema:
        type: string
        example: fE9mZnNldHw9NSZsaW1pdD01
    Prev-Page:
      description: A link to the previous page. Previous-Page header link MAY be omitted if the current page is the first page.
      required: false
      schema:
        type: string
        example: fE9mZnNldHw9MCZsaW1pdD01
    Last-Page:
      description: A link to the last page. Last-Page header link MAY be omitted if the current page is the last page.
      required: false
      schema:
        type: string
        example: fE9mZnNldHw9NTkmbGltaXQ9NQ==
    First-Page:
      description: A link to thefirst page. First-Page header link MAY be omitted if current page is the first page.
      required: false
      schema:
        type: string
        example: fE9mZnNldHw9NjAmbGltaXQ9NQ==
